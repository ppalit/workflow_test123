name: Create Environment Folders to User Branch

on:
  workflow_dispatch:
    inputs:
      app_name:
        description: 'Name of the application'
        required: true
        type: string
      env:
        description: 'Environment (e.g., dev, qa, rel, prod)'
        required: true
        type: choice
        options:
          - dev
          - qa
          - rel
          - prod
      architecture:
        description: 'Architecture type (datalanding, webapp, messaging, default)'
        required: true
        type: choice
        options:
          - datalanding
          - webapp
          - messaging
          - default
      region:
        description: 'Region for tfvars file (optional)'
        type: string
        required: false
        default: "use2"

permissions:
  contents: write

jobs:
  create-folder:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up variables
      id: vars
      run: |
        echo "APP_DIR=${{ github.workspace }}/${{ github.event.inputs.app_name }}/${{ github.event.inputs.env }}" >> $GITHUB_ENV
        echo "REF_ARCH_FILE=${{ github.workspace }}/example/architecture/refArch.yaml" >> $GITHUB_ENV
        echo "RESOURCES_FILE=${{ github.workspace }}/example/architecture/resources.yaml" >> $GITHUB_ENV
        echo "EXAMPLE_DIR=${{ github.workspace }}/example" >> $GITHUB_ENV
        echo "ARCHITECTURE=${{ github.event.inputs.architecture }}" >> $GITHUB_ENV
        echo "APP_BASE_DIR=${{ github.workspace }}/${{ github.event.inputs.app_name }}" >> $GITHUB_ENV
        echo "BRANCH_NAME=users/${{ github.actor }}/${{ github.event.inputs.app_name }}-${{ github.event.inputs.env }}" >> $GITHUB_ENV
        echo "TFVARS_FILE=${{ github.event.inputs.app_name }}_${{ github.event.inputs.env }}_${{ github.event.inputs.region }}.tfvars" >> $GITHUB_ENV

    - name: Check if environment directory exists
      run: |
        if [ -d "$APP_DIR" ]; then
          echo "Error: Environment '${{ github.event.inputs.env }}' already exists for '${{ github.event.inputs.app_name }}'."
          exit 1
        fi

    - name: Create environment directory
      run: |
        mkdir -p "$APP_DIR"

    - name: Copy files based on architecture
      id: copy_files
      run: |
        arch_resources=$(yq -r ".$ARCHITECTURE.resources[]" "$REF_ARCH_FILE")
        FILE_LIST=""
        SELECTED_RESOURCES=""

        for resource in $arch_resources; do
          filenames=$(yq -r ".$resource.filename[]" "$RESOURCES_FILE" || echo "")
          for filename in $filenames; do
            source_file="$EXAMPLE_DIR/$filename"
            target_file="$APP_DIR/$filename"
            if [ -f "$source_file" ]; then
              cp "$source_file" "$target_file"
              FILE_LIST="$FILE_LIST$filename\n"
              SELECTED_RESOURCES="$SELECTED_RESOURCES$resource,"
            fi
          done
        done

        echo "FILE_LIST<<EOF" >> $GITHUB_ENV
        echo "$FILE_LIST" >> $GITHUB_ENV
        echo "EOF" >> $GITHUB_ENV
        echo "SELECTED_RESOURCES<<EOF" >> $GITHUB_ENV
        echo "$SELECTED_RESOURCES" >> $GITHUB_ENV
        echo "EOF" >> $GITHUB_ENV

    - name: Generate tfvars file
      run: |
        RESOURCES_FILE="${{ steps.vars.outputs.RESOURCES_FILE }}"
        TFVARS_FILE="${{ steps.vars.outputs.TFVARS_FILE }}"
        APP_DIR="${{ steps.vars.outputs.APP_DIR }}"
        SELECTED_RESOURCES="${{ steps.copy_files.outputs.SELECTED_RESOURCES }}"
        REGION="${{ github.event.inputs.region }}"

        echo "Debugging: SELECTED_RESOURCES = [$SELECTED_RESOURCES]" >> "$APP_DIR/debug.log"

        if [ -n "$SELECTED_RESOURCES" ]; then
          IFS=',' read -ra SELECTED_ARRAY <<< "$SELECTED_RESOURCES"
          for resource in "${SELECTED_ARRAY[@]}"; do
            resource=$(echo "$resource" | tr -d ' ')  # Trim spaces
            if [[ "$resource" != "terraform" ]]; then
              variables=$(yq -r ".$resource.variables[]" "$RESOURCES_FILE")

              if [ -n "$variables" ]; then
                echo "## $resource" >> "$APP_DIR/$TFVARS_FILE"
                while IFS= read -r line; do
                  key=$(echo "$line" | cut -d ':' -f 1 | tr -d ' ')
                  value=$(echo "$line" | cut -d ':' -f 2- | sed -e 's/%app_name%/${{ github.event.inputs.app_name }}/g' -e 's/%env%/${{ github.event.inputs.env }}/g' -e 's/%region%/'"$REGION"'/g' | sed 's/^ *//g')

                  if [[ "$value" == "|" ]]; then
                    # Handle multi-line values correctly
                    echo "$key = {" >> "$APP_DIR/$TFVARS_FILE"
                  elif [[ "$value" == "}" ]]; then
                    echo "}" >> "$APP_DIR/$TFVARS_FILE"
                  else
                    echo "$key = \"$value\"" >> "$APP_DIR/$TFVARS_FILE"
                  fi
                done <<< "$variables"
                echo "" >> "$APP_DIR/$TFVARS_FILE"
              fi
            fi
          done
        fi

    - name: Generate tfvars file
      run: |
        RESOURCES_FILE="${{ steps.vars.outputs.RESOURCES_FILE }}"
        TFVARS_FILE="${{ steps.vars.outputs.TFVARS_FILE }}"
        APP_DIR="${{ steps.vars.outputs.APP_DIR }}"
        SELECTED_RESOURCES="${{ steps.copy_files.outputs.SELECTED_RESOURCES }}"
        REGION="${{ github.event.inputs.region }}"
  
        echo "Debugging: SELECTED_RESOURCES = [$SELECTED_RESOURCES]" >> "$APP_DIR/debug.log"
  
        if [ -n "$SELECTED_RESOURCES" ]; then
          IFS=',' read -ra SELECTED_ARRAY <<< "$SELECTED_RESOURCES"
          for resource in "${SELECTED_ARRAY[@]}"; do
            resource=$(echo "$resource" | tr -d ' ')  # Trim spaces
            if [[ "$resource" != "terraform" ]]; then
              variables=$(yq -r ".$resource.variables[]" "$RESOURCES_FILE")
  
              if [ -n "$variables" ]; then
                echo "## $resource" >> "$APP_DIR/$TFVARS_FILE"
                while IFS= read -r line; do
                  key=$(echo "$line" | cut -d ':' -f 1 | tr -d ' ')
                  value=$(echo "$line" | cut -d ':' -f 2- | sed -e 's/%app_name%/${{ github.event.inputs.app_name }}/g' -e 's/%env%/${{ github.event.inputs.env }}/g' -e 's/%region%/'"$REGION"'/g' | sed 's/^ *//g')
  
                  if [[ "$value" == "|" ]]; then
                    # Handle multi-line values correctly
                    echo "$key = {" >> "$APP_DIR/$TFVARS_FILE"
                  elif [[ "$value" == "}" ]]; then
                    echo "}" >> "$APP_DIR/$TFVARS_FILE"
                  else
                    echo "$key = \"$value\"" >> "$APP_DIR/$TFVARS_FILE"
                  fi
                done <<< "$variables"
                echo "" >> "$APP_DIR/$TFVARS_FILE"
              fi
            fi
          done
        fi


    - name: Create and switch to new branch
      run: |
        git config --global user.email "actions@github.com"
        git config --global user.name "GitHub Actions"
        git fetch origin
        if git show-ref --verify --quiet "refs/remotes/origin/$BRANCH_NAME"; then
          echo "Branch already exists. Skipping push."
          exit 0
        fi
        git checkout -b "$BRANCH_NAME"

    - name: Commit and push changes to user branch
      run: |
        git add "$APP_DIR"/*
        git commit -m "Create environment folder ${{ github.event.inputs.app_name }}/${{ github.event.inputs.env }} for ${{ github.event.inputs.architecture }}"
        git push origin "$BRANCH_NAME"

    - name: Workflow Summary
      run: |
        echo "## Summary" >> $GITHUB_STEP_SUMMARY
        echo "App Name: ${{ github.event.inputs.app_name }}" >> $GITHUB_STEP_SUMMARY
        echo "Environment: ${{ github.event.inputs.env }}" >> $GITHUB_STEP_SUMMARY
        echo "Architecture: ${{ github.event.inputs.architecture }}" >> $GITHUB_STEP_SUMMARY
        echo "Created Branch: $BRANCH_NAME" >> $GITHUB_STEP_SUMMARY
        echo "### Created Files:" >> $GITHUB_STEP_SUMMARY
        echo "```" >> $GITHUB_STEP_SUMMARY
        echo "$FILE_LIST" >> $GITHUB_STEP_SUMMARY
        echo "```" >> $GITHUB_STEP_SUMMARY
