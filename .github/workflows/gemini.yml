name: Create Environment Folders to User Branch

on:
  workflow_dispatch:
    inputs:
      app_name:
        description: 'Name of the application'
        required: true
        type: string
      env:
        description: 'Environment (e.g., dev, qa, rel, prod)'
        required: true
        type: choice
        options:
          - dev
          - qa
          - rel
          - prod
      architecture:
        description: 'Architecture type (datalanding, webapp, messaging, default)'
        required: true
        type: choice
        options:
          - datalanding
          - webapp
          - messaging
          - default
      region:
        description: 'Region for tfvars file (optional)'
        type: string
        required: false
        default: "use2"

permissions:
  contents: write

jobs:
  create-folder:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Install yq (v4)
      run: |
        sudo snap install yq
        yq --version

    - name: Set up variables
      id: vars
      run: |
        echo "APP_DIR=${{ github.workspace }}/${{ github.event.inputs.app_name }}/${{ github.event.inputs.env }}" >> $GITHUB_OUTPUT
        echo "REF_ARCH_FILE=${{ github.workspace }}/example/architecture/refArch.yaml" >> $GITHUB_OUTPUT
        echo "RESOURCES_FILE=${{ github.workspace }}/example/architecture/resources.yaml" >> $GITHUB_OUTPUT
        echo "EXAMPLE_DIR=${{ github.workspace }}/example" >> $GITHUB_OUTPUT
        echo "ARCHITECTURE=${{ github.event.inputs.architecture }}" >> $GITHUB_OUTPUT
        echo "APP_BASE_DIR=${{ github.workspace }}/${{ github.event.inputs.app_name }}" >> $GITHUB_OUTPUT
        echo "BRANCH_NAME=users/${{ github.actor }}/${{ github.event.inputs.app_name }}-${{ github.event.inputs.env }}" >> $GITHUB_OUTPUT
        echo "TFVARS_FILE=${{ github.event.inputs.app_name }}_${{ github.event.inputs.env }}_${{ github.event.inputs.region }}.tfvars" >> $GITHUB_OUTPUT

    - name: Check if app directory exists and exit if it does
      id: check_app_dir
      run: |
        if [ -d "${{ steps.vars.outputs.APP_BASE_DIR }}" ]; then
          echo "Error: App directory '${{ github.event.inputs.app_name }}' already exists."
          exit 1
        fi

    - name: Create environment directory
      run: |
        mkdir -p ${{ steps.vars.outputs.APP_DIR }}

    - name: Copy files based on architecture
      id: copy_files
      run: |
        ARCH_FILE="${{ steps.vars.outputs.REF_ARCH_FILE }}"
        RESOURCES_FILE="${{ steps.vars.outputs.RESOURCES_FILE }}"
        APP_DIR="${{ steps.vars.outputs.APP_DIR }}"
        EXAMPLE_DIR="${{ steps.vars.outputs.EXAMPLE_DIR }}"
        ARCHITECTURE="${{ steps.vars.outputs.ARCHITECTURE }}"
        FILE_LIST=""
        SELECTED_RESOURCES=""

        if [ -f "$ARCH_FILE" ] && [ -f "$RESOURCES_FILE" ]; then
          arch_resources=$(yq -r ".$ARCHITECTURE.resources[]" "$ARCH_FILE")

          if [ -n "$arch_resources" ]; then
            for resource in $arch_resources; do
              filenames=$(yq -r ".$resource.filename[]" "$RESOURCES_FILE")
              if [ -n "$filenames" ]; then
                for filename in $filenames; do
                  source_file="$EXAMPLE_DIR/$filename"
                  target_file="$APP_DIR/$filename"
                  if [ -f "$source_file" ]; then
                    FILE_LIST="$FILE_LIST$filename\n"
                    cp "$source_file" "$target_file"
                    SELECTED_RESOURCES="$SELECTED_RESOURCES$resource,"
                  else
                    echo "Warning: File '$filename' for resource '$resource' not found in example directory."
                  fi
                done
              else
                echo "Warning: Filenames for resource '$resource' not found in resources.yaml."
              fi
            done
          fi

          terraform_resources=$(yq -r ".terraform.filename[]" "$RESOURCES_FILE")
          if [ -n "$terraform_resources" ]; then
            for resource in $terraform_resources; do
              source_file="$EXAMPLE_DIR/$resource"
              target_file="$APP_DIR/$resource"
              if [ -f "$source_file" ]; then
                cp "$source_file" "$target_file"
                FILE_LIST="$FILE_LIST$resource\n"
                SELECTED_RESOURCES="$SELECTED_RESOURCES$resource,"
              fi
            done
          fi
          echo "Final FILE_LIST: $FILE_LIST"
          echo "FILE_LIST<<EOF" >> $GITHUB_OUTPUT
          echo "$FILE_LIST" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          echo "SELECTED_RESOURCES<<EOF" >> $GITHUB_OUTPUT
          echo "$SELECTED_RESOURCES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        else
          echo "Architecture or resources definition file not found."
          exit 1
        fi

    - name: Generate tfvars file
      run: |
        RESOURCES_FILE="${{ steps.vars.outputs.RESOURCES_FILE }}"
        TFVARS_FILE="${{ steps.vars.outputs.TFVARS_FILE }}"
        APP_DIR="${{ steps.vars.outputs.APP_DIR }}"
        SELECTED_RESOURCES="${{ steps.copy_files.outputs.SELECTED_RESOURCES }}"
        REGION="${{ github.event.inputs.region }}"

        if [ -n "$SELECTED_RESOURCES" ]; then
          IFS=',' read -ra SELECTED_ARRAY <<< "$SELECTED_RESOURCES"
          for resource in "${SELECTED_ARRAY[@]}"; do
            resource=$(echo "$resource" | tr -d ' ')
            if [[ "$resource" != "terraform" ]]; then # Exclude terraform core files
              variables=$(yq -r ".$resource.variables" "$RESOURCES_FILE")

              if [ -n "$variables" ]; then
                echo "## $resource" >> "$APP_DIR/$TFVARS_FILE"
                echo "$variables" | while IFS='=' read -r key value; do
                  if [[ -n "$key" && -n "$value" ]]; then
                    if [[ "$value" == *'|'* ]]; then # multiline variable
                      echo "  $key = $(echo "$value" | sed -e 's/|//')" >> "$APP_DIR/$TFVARS_FILE"
                    else
                      echo "  $key = \"$(echo \"$value\" | sed -e 's/%app_name%/${{ github.event.inputs.app_name }}/g' -e 's/%env%/${{ github.event.inputs.env }}/g' -e 's/%region%/$REGION/g')\"" >> "$APP_DIR/$TFVARS_FILE"
                    fi
                  fi
                done
                echo "" >> "$APP_DIR/$TFVARS_FILE" # Add a blank line between resources
              fi
            fi
          done
        fi

    - name: Create and switch to new branch
      run: |
        git config --global user.email "actions@github.com"
        git config --global user.name "GitHub Actions"
        git checkout -b ${{ steps.vars.outputs.BRANCH_NAME }}

    - name: Commit and push changes to user branch
      run: |
        git add ${{ steps.vars.outputs.APP_DIR }}/*
        git commit -m "Create environment folder ${{ github.event.inputs.app_name }}/${{ github.event.inputs.env }} for ${{ github.event.inputs.architecture }}"
        git push origin ${{ steps.vars.outputs.BRANCH_NAME }} --force

    - name: Workflow Summary
      run: |
        echo "## Summary" >> $GITHUB_STEP_SUMMARY
        echo "App Name: ${{ github.event.inputs.app_name }}" >> $GITHUB_STEP_SUMMARY
        echo "Environment: ${{ github.event.inputs.env }}" >> $GITHUB_STEP_SUMMARY
        echo "Architecture: ${{ github.event.inputs.architecture }}" >> $GITHUB_STEP_SUMMARY
        echo "Created Branch: ${{ steps.vars.outputs.BRANCH_NAME }}" >> $GITHUB_STEP_SUMMARY
        echo "### Created Files:" >> $GITHUB_STEP_SUMMARY
        echo "```" >> <span class="math-inline">GITHUB\_STEP\_SUMMARY
        echo "</span>{{ steps.copy_files.outputs.FILE_LIST }}" >> $GITHUB_STEP_SUMMARY
        echo "```" >> $GITHUB_